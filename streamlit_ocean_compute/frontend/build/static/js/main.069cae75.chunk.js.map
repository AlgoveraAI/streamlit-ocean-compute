{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["getAccount","provider","ethers","Web3Provider","window","ethereum","send","signer","getSigner","getAddress","address","WalletConnect","state","walletAddress","isFocused","render","theme","props","style","borderStyling","primaryColor","border","outline","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","setState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","MyComponent","document","getElementById"],"mappings":";8kNAmBeA,I,2EAAf,+FAGEC,EAAW,IAAIC,IAAiBC,aAAaC,OAAOC,SAAU,OAHhE,SAKQJ,EAASK,KAAK,sBAAuB,IAL7C,cAMEC,EAASN,EAASO,YANpB,SAOwBD,EAAOE,aAP/B,cAOQC,EAPR,yBAQSA,GART,4C,0BAeMC,E,4MACGC,MAAQ,CAAEC,cAAe,MAAOC,WAAW,G,EAE3CC,OAAS,WAOd,IAAQC,EAAU,EAAKC,MAAfD,MACFE,EAA6B,GAInC,GAAIF,EAAO,CAGT,IAAMG,EAAa,oBACjB,EAAKP,MAAME,UAAYE,EAAMI,aAAe,QAE9CF,EAAMG,OAASF,EACfD,EAAMI,QAAUH,EAOlB,OACE,8BACE,4BACED,MAAOA,EACPK,QAAS,EAAKC,UACdC,SAAU,EAAKR,MAAMQ,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,SALf,oB,EAcEL,U,sBAAY,oGACIxB,IADJ,OACZU,EADY,OAElB,EAAKoB,UACH,iBAAO,CAAEjB,cAAeH,MACxB,kBAAMqB,IAAUC,kBAAkB,EAAKpB,MAAMC,kBAJ7B,2C,EAWZc,SAAW,WACjB,EAAKG,SAAS,CAAEhB,WAAW,K,EAIrBe,QAAU,WAChB,EAAKC,SAAS,CAAEhB,WAAW,K,yBA9DHmB,KAuEbC,cAAwBvB,GCrGvCwB,IAASpB,OACP,kBAAC,IAAMqB,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.069cae75.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport * as ethers from \"ethers\"\n\ninterface State {\n  walletAddress: string\n  isFocused: boolean\n}\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n\nasync function getAccount() {\n  var provider;\n  var signer;\n  provider = new ethers.providers.Web3Provider(window.ethereum, \"any\");\n  // Prompt user for account connections\n  await provider.send(\"eth_requestAccounts\", []);\n  signer = provider.getSigner();\n  const address = await signer.getAddress();\n  return address\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass WalletConnect extends StreamlitComponentBase<State> {\n  public state = { walletAddress: \"not\", isFocused: false }\n\n  public render = (): ReactNode => {\n    // Arguments that are passed to the plugin in Python are accessible\n    // via `this.props.args`. Here, we access the \"name\" arg.\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n\n    // Show a button and some text.\n    // When the button is clicked, we'll increment our \"numClicks\" state\n    // variable, and send its new value back to Streamlit, where it'll\n    // be available to the Python program.\n    return (\n      <span>\n        <button\n          style={style}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          Connect Wallet\n        </button>\n      </span>\n    )\n  }\n\n  /** Click handler for our \"Click Me!\" button. */\n  private onClicked = async (): Promise<void> => {\n    const address = await getAccount()\n    this.setState(\n      () => ({ walletAddress: address }),\n      () => Streamlit.setComponentValue(this.state.walletAddress)\n    )\n    // Increment state.numClicks, and pass the new value back to\n    // Streamlit via `Streamlit.setComponentValue`.\n  }\n\n  /** Focus handler for our \"Click Me!\" button. */\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  /** Blur handler for our \"Click Me!\" button. */\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(WalletConnect)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}